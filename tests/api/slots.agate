class Slots {
  static no_set foreign
  static get_slots(bool, float, string, bytes, value) foreign
  static set_slots(a, b, c, d, e) foreign
  static slot_types(bool, foreign_val, array, map, nil_val, float, string, unknown) foreign
  static ensure() foreign
  static ensure_outside_foreign() foreign
  static get_array_size(array) foreign
  static get_array_element(array, index) foreign
  static get_map_size(map) foreign
  static get_map_value(map, key) foreign
}

foreign class ForeignType {
  construct new() {}
}

# If nothing is set in the return slot, it retains its previous value, the receiver.
IO.println(Slots.no_set == Slots) # expect: true

def value = ["value"]
IO.println(Slots.get_slots(true, "by\0te", 1.5, "str", value) == value)
# expect: true

IO.println(Slots.set_slots(value, 0, 0, 0, 0) == value)
# expect: true

IO.println(Slots.slot_types(false, ForeignType.new(), [], {}, nil, 1.2, "str", 1..2))
# expect: true

IO.println(Slots.ensure())
# expect: 1 -> 21 (190)

IO.println(Slots.ensure_outside_foreign())
# expect: 0 -> 20 (190)

def ducks = ["Huey", "Dewey", "Louie"]
IO.println(Slots.get_array_size(ducks))      # expect: 3
IO.println(Slots.get_array_element(ducks, 0)) # expect: Huey
IO.println(Slots.get_array_element(ducks, 1)) # expect: Dewey

def capitals = {
  "England": "London",
  "Scotland": "Edinburgh",
  "Wales": "Cardiff",
  "N. Ireland": "Belfast"
}

IO.println(Slots.get_map_size(capitals)) # expect: 4
IO.println(Slots.get_map_value(capitals, "England")) # expect: London
IO.println(Slots.get_map_value(capitals, "Wales")) # expect: Cardiff
IO.println(Slots.get_map_value(capitals, "S. Ireland")) # expect: nil
