def f0() { 123 }
def f1() { 123 }

# Not structurally equal.
IO.println(Fn.new { 123 } == Fn.new { 123 })  # expect: false
IO.println(Fn.new { 123 } != Fn.new { 123 })  # expect: true

IO.println(f0 == f1)  # expect: false
IO.println(f0 != f1)  # expect: true

# Not equal to other types.
IO.println(Fn.new { 123 } == 1)         # expect: false
IO.println(Fn.new { 123 } == false)     # expect: false
IO.println(Fn.new { 123 } == "fn 123")  # expect: false
IO.println(Fn.new { 123 } != 1)         # expect: true
IO.println(Fn.new { 123 } != false)     # expect: true
IO.println(Fn.new { 123 } != "fn 123")  # expect: true

IO.println(f0 == 1)         # expect: false
IO.println(f0 == false)     # expect: false
IO.println(f0 == "fn 123")  # expect: false
IO.println(f0 != 1)         # expect: true
IO.println(f0 != false)     # expect: true
IO.println(f0 != "fn 123")  # expect: true

# Equal by identity.
def f = Fn.new { 123 }
IO.println(f == f) # expect: true
IO.println(f != f) # expect: false

def g() { }
IO.println(g == g) # expect: true
IO.println(g != g) # expect: false

# Closures for the same function are not equal.
def fns = []
for (i in 1..2) {
  fns.append(Fn.new { 123 })
}
IO.println(fns[0] == fns[1]) # expect: false
