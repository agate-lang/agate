# Value types compare by value.
IO.println(Object.same(true, true)) # expect: true
IO.println(Object.same(true, false)) # expect: false

IO.println(Object.same(nil, nil)) # expect: true

IO.println(Object.same(1 + 2, 2 + 1)) # expect: true
IO.println(Object.same(1 + 2, 2 + 2)) # expect: false

IO.println(Object.same(1..2, 1..2)) # expect: true
IO.println(Object.same(1..2, 1..3)) # expect: false

IO.println(Object.same("ab", "a" + "b")) # expect: true
IO.println(Object.same("ab", "a" + "c")) # expect: false

# Different types are never the same.
IO.println(Object.same(nil, false)) # expect: false
IO.println(Object.same(true, 2)) # expect: false
IO.println(Object.same(1..2, 2)) # expect: false
IO.println(Object.same("1", 1)) # expect: false

# Classes compare by identity.
IO.println(Object.same(Bool, Int)) # expect: false
IO.println(Object.same(Bool, Bool)) # expect: true

# Other types compare by identity.
class Foo {
  construct new() {}
}

def foo = Foo.new()
IO.println(Object.same(foo, foo)) # expect: true
IO.println(Object.same(foo, Foo.new())) # expect: false

# Ignores == operators.
class Bar {
  construct new() {}
  ==(other) { true }
}

def bar = Bar.new()
IO.println(Object.same(bar, bar)) # expect: true
IO.println(Object.same(bar, Bar.new())) # expect: false
