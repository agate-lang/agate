# Infinite iterator demonstrating that Sequence.where is not eager
class FibIterator {
  construct new() {
    @current = 0
    @next = 1
  }

  iterate {
    def sum = @current + @next
    @current = @next
    @next = sum
  }

  value { @current }
}

class Fib is Sequence {
  construct new() { }

  iterate(iterator) {
    if (iterator == nil) {
      return FibIterator.new()
    }
    iterator.iterate
    return iterator
  }

  iterator_value(iterator) { iterator.value }
}

def large_fib = Fib.new().where {|fib| fib > 100 }
def iterator = nil

IO.println(large_fib is Sequence) # expect: true
IO.println(large_fib) # expect: instance of __WhereSequence

iterator = large_fib.iterate(iterator)
IO.println(large_fib.iterator_value(iterator)) # expect: 144

iterator = large_fib.iterate(iterator)
IO.println(large_fib.iterator_value(iterator)) # expect: 233

iterator = large_fib.iterate(iterator)
IO.println(large_fib.iterator_value(iterator)) # expect: 377
