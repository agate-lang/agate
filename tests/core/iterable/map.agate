# Infinite iterator demonstrating that Iterable.map is not eager
class FibIterator {
  construct new() {
    @current = 0
    @next = 1
  }

  iterate {
    def sum = @current + @next
    @current = @next
    @next = sum
  }

  value { @current }
}

class Fib {
  mixin Iterable

  construct new() { }

  iterate(iterator) {
    if (iterator == nil) {
      return FibIterator.new()
    }
    iterator.iterate
    return iterator
  }

  iterator_value(iterator) { iterator.value }
}

def square_fib = Fib.new().map {|fib| fib * fib }
def iterator = nil

IO.println(square_fib is Iterable) # expect: false
IO.println(square_fib) # expect: instance of __MapIterable

iterator = square_fib.iterate(iterator)
IO.println(square_fib.iterator_value(iterator)) # expect: 0

iterator = square_fib.iterate(iterator)
IO.println(square_fib.iterator_value(iterator)) # expect: 1

iterator = square_fib.iterate(iterator)
IO.println(square_fib.iterator_value(iterator)) # expect: 1

iterator = square_fib.iterate(iterator)
IO.println(square_fib.iterator_value(iterator)) # expect: 4

iterator = square_fib.iterate(iterator)
IO.println(square_fib.iterator_value(iterator)) # expect: 9
